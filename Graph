function bfs(graph, startNode) {
    var parents = [];
    var queue = [];
    var visited = [];
    var current;
    queue.push(startNode);
    parents[startNode] = null;
    visited[startNode] = true;
    while (queue.length) {
        current = queue.shift();
        console.log(current)
        /*if (current === targetNode) {
         return buildPath(parents, targetNode);
         }*/
        for (var i = 0; i < graph.length; i += 1) {
            if (i !== current && graph[current][i] && !visited[i]) {
                parents[i] = current;
                visited[i] = true;
                queue.push(i);
            }
        }
    }
};

var graph = [[1, 1, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 0],
    [0, 1, 0, 1, 0, 0],
    [0, 0, 1, 0, 1, 1],
    [1, 1, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0]];
console.log("BFS")
var shortestPath = bfs(graph, 0); // [1, 2, 3, 5]


function dfs(graph, current) {
    var stack = [];
    var visited = [];
    var node;
    stack.push(current);
    visited[current] = true;
    while (stack.length) {
        node = stack.pop();
        console.log(node)
        for (var i = 0; i < graph[node].length; i += 1) {
            if (graph[node][i] && !visited[i]) {
                stack.push(i);
                visited[i] = true;
            }
        }
    }
    return false;
}
console.log("DFS")
var shortestPath = dfs(graph, 0); // [1, 2, 3, 5]
